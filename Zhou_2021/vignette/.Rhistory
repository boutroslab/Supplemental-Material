scale= 'row',
color=colorRampPalette(rev(brewer.pal(n=11, name = "RdBu")))(200),
cluster_cols = F)
# Chunk 12: heatmap_1D
NFkB_signature_subset <- read.csv("NFkB_signature.csv",
row.names=1, stringsAsFactors = FALSE)
colnames(NFkB_signature_subset) <- "gene"
pheatmap(assay(vsd)[NFkB_signature_subset$gene,],
scale= 'row',
color=colorRampPalette(rev(brewer.pal(n=11, name = "RdBu")))(200),
cluster_cols = F)
# Chunk 13: res
dds <- DESeq(dds)
res <- lfcShrink(dds, coef="condition_Shn.RNAi.PucE69.._vs_WT.day7", type="apeglm")
# Chunk 14: go
res_wt_vs_puc_schrinked <- read_csv("res_wt_vs_puc_schrinked.csv")
ggplot(res_wt_vs_puc_schrinked, aes(reorder(`Go term_BP enrichment`, `LOG10 P`), -`LOG10 P`)) +
geom_col(aes(fill=`P-value`<0.05)) +
coord_flip() +
labs(x="Pathway", y="- Log10 Pvalue",
title="GO-analysis") +
theme_minimal()
# Chunk 15: load_gene_signatures
NFkB_dependent_gene_list <- read.csv("NFkB_dependent_gene_list.csv",
row.names=1, stringsAsFactors = FALSE)
colnames(NFkB_dependent_gene_list) <- "gene"
Hippo_signaling_gene_list <- read.csv("Hippo signaling.csv",
row.names=1, stringsAsFactors = FALSE)
colnames(Hippo_signaling_gene_list) <- "gene"
# Chunk 16: gsea
pathway <- list()
pathway$NFkB <- NFkB_dependent_gene_list$gene
pathway$Hippo <- Hippo_signaling_gene_list$gene
res_gsea <- as.data.frame(res) %>% rownames_to_column(var="SYMBOL") %>% dplyr::select(SYMBOL, stat)
ranks <- deframe(res_wt_puc_fgsea)
fgseaRes <- fgsea(pathways=pathway, stats=ranks, nperm=1000)
pathway <- list()
pathway$NFkB <- NFkB_dependent_gene_list$gene
pathway$Hippo <- Hippo_signaling_gene_list$gene
res_gsea <- as.data.frame(res) %>% rownames_to_column(var="SYMBOL") %>% dplyr::select(SYMBOL, stat)
ranks <- deframe(res_gsea)
fgseaRes <- fgsea(pathways=pathway, stats=ranks, nperm=1000)
dds <- DESeq(dds)
res <- lfcShrink(dds, coef="condition_Shn.RNAi.PucE69.._vs_WT.day7", type="apeglm")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning=FALSE, cache = TRUE)
# Chunk 2: imports
library("tximport")
library("readr")
library("tximportData")
library("tidyverse")
library("tximeta")
library("org.Dm.eg.db")
library("DESeq2")
library("vsn")
library("pheatmap")
library("RColorBrewer")
library("readxl")
library("apeglm")
library("fgsea")
# Chunk 5: metadata
samples <- read_csv("samples.csv")
samples %>% dplyr::select(id, condition, SAMPLE_ID, sample_name, FASTQ_FILE)
files <- file.path(samples$directory, "quant.sf")
names(files) <- samples$sample_name
# Chunk 6: tximport
coldata <- data.frame(files, names = samples$sample_name)
se <- tximeta(coldata)
gse <- summarizeToGene(se)
# Chunk 7: new_id
gse <- addIds(gse, "REFSEQ", gene=TRUE)
mcols(gse)
# Chunk 8: deseq2
colData(gse)$condition <- as_factor(samples$condition)
dds <- DESeqDataSet(gse, design = ~ condition)
dds$condition <- relevel(dds$condition, ref = "WT day7")
# Chunk 9: dseq-analysis
before <- nrow(dds)
#remove low counts
dds <- dds[rowSums(counts(dds)) >= 5, ]
after <- nrow(dds)
#rename genes
rownames(dds) <- mcols(dds)$symbol
# Chunk 10: normalization
vsd <- vst(dds, blind = FALSE)
# Chunk 11: heatmap_5A
upregulated_genes_immunity <- read.csv("upregulated_genes_immunity.csv",
row.names=1, stringsAsFactors = FALSE)
colnames(upregulated_genes_immunity) <- "gene"
pheatmap(assay(vsd)[upregulated_genes_immunity$gene,],
scale= 'row',
color=colorRampPalette(rev(brewer.pal(n=11, name = "RdBu")))(200),
cluster_cols = F)
# Chunk 12: heatmap_1D
NFkB_signature_subset <- read.csv("NFkB_signature.csv",
row.names=1, stringsAsFactors = FALSE)
colnames(NFkB_signature_subset) <- "gene"
pheatmap(assay(vsd)[NFkB_signature_subset$gene,],
scale= 'row',
color=colorRampPalette(rev(brewer.pal(n=11, name = "RdBu")))(200),
cluster_cols = F)
samples <- read_csv("samples.csv")
samples %>% dplyr::select(id, condition, SAMPLE_ID, sample_name, FASTQ_FILE)
files <- file.path(samples$directory, "quant.sf")
names(files) <- samples$sample_name
pathway <- list()
pathway$NFkB <- NFkB_dependent_gene_list$gene
pathway$Hippo <- Hippo_signaling_gene_list$gene
res_gsea <- as.data.frame(res) %>% rownames_to_column(var="SYMBOL") %>% dplyr::select(SYMBOL, stat)
ranks <- deframe(res_gsea)
fgseaRes <- fgsea(pathways=pathway, stats=ranks, nperm=1000)
NFkB_dependent_gene_list <- read.csv("NFkB_dependent_gene_list.csv",
row.names=1, stringsAsFactors = FALSE)
colnames(NFkB_dependent_gene_list) <- "gene"
Hippo_signaling_gene_list <- read.csv("Hippo signaling.csv",
row.names=1, stringsAsFactors = FALSE)
colnames(Hippo_signaling_gene_list) <- "gene"
NFkB_dependent_gene_list <- read.csv("NFkB_dependent_gene_list.csv",
row.names=1, stringsAsFactors = FALSE)
colnames(NFkB_dependent_gene_list) <- "gene"
Hippo_signaling_gene_list <- read.csv("Hippo signaling.csv",
row.names=1, stringsAsFactors = FALSE)
colnames(Hippo_signaling_gene_list) <- "gene"
getwd
getwd()
unlink('lavoro/drosophilaRNAseq/Drosophila RNAseq/vignette/zhou_2020_cache', recursive = TRUE)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning=FALSE, cache = TRUE)
# Chunk 2: imports
library("tximport")
library("readr")
library("tximportData")
library("tidyverse")
library("tximeta")
library("org.Dm.eg.db")
library("DESeq2")
library("vsn")
library("pheatmap")
library("RColorBrewer")
library("readxl")
library("apeglm")
library("fgsea")
# Chunk 5: metadata
setwd("~/lavoro/drosophilaRNAseq/Drosophila RNAseq/vignette/")
samples <- read_csv("samples.csv")
samples %>% dplyr::select(id, condition, SAMPLE_ID, sample_name, FASTQ_FILE)
files <- file.path(samples$directory, "quant.sf")
names(files) <- samples$sample_name
# Chunk 6: tximport
coldata <- data.frame(files, names = samples$sample_name)
se <- tximeta(coldata)
gse <- summarizeToGene(se)
# Chunk 7: new_id
gse <- addIds(gse, "REFSEQ", gene=TRUE)
mcols(gse)
# Chunk 8: deseq2
colData(gse)$condition <- as_factor(samples$condition)
dds <- DESeqDataSet(gse, design = ~ condition)
dds$condition <- relevel(dds$condition, ref = "WT day7")
# Chunk 9: dseq-analysis
before <- nrow(dds)
#remove low counts
dds <- dds[rowSums(counts(dds)) >= 5, ]
after <- nrow(dds)
#rename genes
rownames(dds) <- mcols(dds)$symbol
# Chunk 10: normalization
vsd <- vst(dds, blind = FALSE)
# Chunk 11: heatmap_5A
upregulated_genes_immunity <- read.csv("upregulated_genes_immunity.csv",
row.names=1, stringsAsFactors = FALSE)
colnames(upregulated_genes_immunity) <- "gene"
pheatmap(assay(vsd)[upregulated_genes_immunity$gene,],
scale= 'row',
color=colorRampPalette(rev(brewer.pal(n=11, name = "RdBu")))(200),
cluster_cols = F)
# Chunk 12: heatmap_1D
NFkB_signature_subset <- read.csv("NFkB_signature.csv",
row.names=1, stringsAsFactors = FALSE)
colnames(NFkB_signature_subset) <- "gene"
pheatmap(assay(vsd)[NFkB_signature_subset$gene,],
scale= 'row',
color=colorRampPalette(rev(brewer.pal(n=11, name = "RdBu")))(200),
cluster_cols = F)
# Chunk 13: res
dds <- DESeq(dds)
res <- lfcShrink(dds, coef="condition_Shn.RNAi.PucE69.._vs_WT.day7", type="apeglm")
# Chunk 14: go
res_wt_vs_puc_schrinked <- read_csv("res_wt_vs_puc_schrinked.csv")
ggplot(res_wt_vs_puc_schrinked, aes(reorder(`Go term_BP enrichment`, `LOG10 P`), -`LOG10 P`)) +
geom_col(aes(fill=`P-value`<0.05)) +
coord_flip() +
labs(x="Pathway", y="- Log10 Pvalue",
title="GO-analysis") +
theme_minimal()
NFkB_dependent_gene_list <- read.csv("NFkB_dependent_gene_list.csv",
row.names=1, stringsAsFactors = FALSE)
colnames(NFkB_dependent_gene_list) <- "gene"
Hippo_signaling_gene_list <- read.csv("Hippo signaling.csv",
row.names=1, stringsAsFactors = FALSE)
colnames(Hippo_signaling_gene_list) <- "gene"
pathway <- list()
pathway$NFkB <- NFkB_dependent_gene_list$gene
pathway$Hippo <- Hippo_signaling_gene_list$gene
res_gsea <- as.data.frame(res) %>% rownames_to_column(var="SYMBOL") %>% dplyr::select(SYMBOL, stat)
ranks <- deframe(res_gsea)
fgseaRes <- fgsea(pathways=pathway, stats=ranks, nperm=1000)
library("tibble")
NFkB_dependent_gene_list <- read.csv("NFkB_dependent_gene_list.csv",
row.names=1, stringsAsFactors = FALSE)
colnames(NFkB_dependent_gene_list) <- "gene"
Hippo_signaling_gene_list <- read.csv("Hippo signaling.csv",
row.names=1, stringsAsFactors = FALSE)
colnames(Hippo_signaling_gene_list) <- "gene"
pathway <- list()
pathway$NFkB <- NFkB_dependent_gene_list$gene
pathway$Hippo <- Hippo_signaling_gene_list$gene
res_gsea <- as.data.frame(res) %>% rownames_to_column(var="SYMBOL") %>% dplyr::select(SYMBOL, stat)
ranks <- deframe(res_gsea)
fgseaRes <- fgsea(pathways=pathway, stats=ranks, nperm=1000)
library(tibble)
es_gsea <- as.data.frame(res) %>% rownames_to_column(var="SYMBOL") %>% dplyr::select(SYMBOL, stat)
as.data.frame(res) %>% rownames_to_column(var="SYMBOL") %>% dplyr::select(SYMBOL, stat)
as.data.frame(res)
as.data.frame(res) %>% rownames_to_column(var = "SYMBOL")
as.data.frame(res) %>% rownames_to_column(var = "SYMBOL") %>% dplyr::select(SYMBOL, stat)
dds <- DESeq(dds)
res_wt_puc <- results(dds, contrast = c("condition", "Shn RNAi PucE69/+", "WT day7"))
res <- lfcShrink(dds, coef="condition_Shn.RNAi.PucE69.._vs_WT.day7", type="apeglm")
res_wt_vs_puc_schrinked <- read_csv("res_wt_vs_puc_schrinked.csv")
ggplot(res_wt_vs_puc_schrinked, aes(reorder(`Go term_BP enrichment`, `LOG10 P`), -`LOG10 P`)) +
geom_col(aes(fill=`P-value`<0.05)) +
coord_flip() +
labs(x="Pathway", y="- Log10 Pvalue",
title="GO-analysis") +
theme_minimal()
NFkB_dependent_gene_list <- read.csv("NFkB_dependent_gene_list.csv",
row.names=1, stringsAsFactors = FALSE)
colnames(NFkB_dependent_gene_list) <- "gene"
Hippo_signaling_gene_list <- read.csv("Hippo signaling.csv",
row.names=1, stringsAsFactors = FALSE)
colnames(Hippo_signaling_gene_list) <- "gene"
pathway <- list()
pathway$NFkB <- NFkB_dependent_gene_list$gene
pathway$Hippo <- Hippo_signaling_gene_list$gene
res_gsea <- as.data.frame(res_wt_puc) %>% rownames_to_column(var="SYMBOL") %>% dplyr::select(SYMBOL, stat)
ranks <- deframe(res_gsea)
fgseaRes <- fgsea(pathways=pathway, stats=ranks, nperm=1000)
custom_barcode_plot <- function(stat_vector, sig){
## genes in signature
sig_genes <- pathway[[sig]]
## generate barcode plot
bc_plot <- plotEnrichment(sig_genes, stat_vector)
## remove unwanted layers
bc_plot$layers <- list()
## add barcode at the bottom
lowest_pos <- min(bc_plot$data[,2])
dash_length <- abs(purrr::reduce(range(bc_plot$data[,2]), `-`)*0.1)
middle <- which.min(abs(sort(stat_vector, decreasing=T)))
bc_plot_custom <- bc_plot + geom_segment(aes(x=x, xend=x), y=lowest_pos,
yend=lowest_pos-dash_length) +
geom_line(colour='#4daf4a') +
geom_hline(yintercept=lowest_pos, colour='#cccccc') +
geom_hline(yintercept=0, colour='#cccccc') + xlab('') +
theme_classic() +
geom_tile(data=tibble(rank=1:length(stat_vector),
y=lowest_pos-(1.25*dash_length)),
aes(x=rank, y=y, fill=rank),
width=1,
height=0.5*dash_length) +
scale_fill_gradient2(low ='#b2182b', high='#2166ac',
mid='#f7f7f7', midpoint = middle) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(panel.grid=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x = element_blank(),
legend.position = 'none') +
ggtitle(paste(str_replace_all(sig, "_", " "), "signature", sep = " ")) +
ylab('Enrichment score')
return(bc_plot_custom)
}
bc_plots_affy <- map(1:length(pathway), function(j){
bcp <- custom_barcode_plot(ranks, names(pathway[j])) +
annotate('text', x=Inf , y=Inf, hjust=1, vjust=1,
label=paste('NES =', round(fgseaRes$NES[j], 2),
'\nFDR =', round(fgseaRes$padj[j], 3)))
return(bcp)
})
print(bc_plots_affy)
colnames(res)
res[,pvalue<0.01]
res[,c('pvalue')<0.01]
nrow(res[c('pvalue')<0.01,])
nrow(res[,c('pvalue')<0.01])
nrow(res)
sum(res$pvalue<0.01)
sum(res$pvalue<0.01, na.rm=TRUE)
dds$condition
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE, cache=TRUE)
library("tximport")
library("readr")
library("tximportData")
library("tidyverse")
#Import meta files created by GPCF
X8474_meta <- read_delim("~/lavoro/drosophilaRNAseq/Drosophila RNAseq/8474_meta.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
samples <- X8474_meta %>% filter(grepl("_PMG", SAMPLE_ID)) %>% dplyr::select(FASTQ_FILE, SAMPLE_ID) %>% dplyr::select(FASTQ_FILE,SAMPLE_ID)
samples <-
samples %>%
separate(SAMPLE_ID, into = c("id", "condition", "replicate"), sep = "-", remove = FALSE, convert = TRUE) %>%
arrange(id) %>%
mutate(sample_name = c(paste("w1118", seq(1,2,1), sep = "_"), paste("RelE20", seq(1,2,1), sep = "_"), paste("Shn-RNAi", seq(1,3,1), sep="_"), paste("Shn-RNAi, RelE20", seq(1,2,1), sep="_")))
samples$directory <- paste0("~/lavoro/drosophilaRNAseq/Drosophila RNAseq/quants_008474/quants_008474/", substr(samples$FASTQ_FILE,start = 1, stop=18), "_quant")
rownames(samples) <- samples$FASTQ_FILE
files <- file.path(samples$directory, "quant.sf")
names(files) <- samples$sample_name
files
samples %>% dplyr::select(id, condition, replicate, SAMPLE_ID, sample_name, FASTQ_FILE, directory)
write.csv(samples, file = "~/lavoro/drosophilaRNAseq/Drosophila RNAseq/vignette/samples_second_dataset.csv")
# load metadata
samples <- read_csv("samples_second_dataset.csv")
samples %>% dplyr::select(id, condition, SAMPLE_ID, sample_name, FASTQ_FILE)
# load files with quantification
files <- file.path(samples$directory, "quant.sf")
names(files) <- samples$sample_name
# Transform transcript to gene
coldata <- data.frame(files, names = samples$sample_name)
se <- tximeta(coldata)
gse <- summarizeToGene(se)
# Gene symbol and names were added to the FlyBase identifiers:
gse <- addIds(gse, "REFSEQ", gene=TRUE)
mcols(gse)
samples$condition
unique(samples$condition)
Heatmap_S3C <- read_excel("~/lavoro/drosophilaRNAseq/Drosophila RNAseq/Thank_you_very_much/Heatmap gene list_updted.xlsx", sheet = "Figure S3C")
write.csv(Heatmap_S3C, file = "apoptotic_genes.csv")
library(readxl)
library(pheatmap)
library(RColorBrewer)
Heatmap_S3C <- read_excel("~/lavoro/drosophilaRNAseq/Drosophila RNAseq/Thank_you_very_much/Heatmap gene list_updted.xlsx", sheet = "Figure S3C")
write.csv(Heatmap_S3C, file = "~/lavoro/drosophilaRNAseq/Drosophila RNAseq/vignette/apoptotic_genes.csv")
#genes not in rownames:
Heatmap_S3C$gene[!Heatmap_S3C$gene %in% rownames(vsd)]
#VSD normalization
pheatmap(assay(vsd)[Heatmap_S3C$gene,], scale = "row", color=colorRampPalette(rev(brewer.pal(n=11, name = "RdBu")))(200), cluster_cols = F)
unlink('zhou_2020_cache', recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE, cache=TRUE)
library("tximport")
library("readr")
library("tximportData")
library("tidyverse")
#Import meta files created by GPCF
X8474_meta <- read_delim("~/lavoro/drosophilaRNAseq/Drosophila RNAseq/8474_meta.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
samples <- X8474_meta %>% filter(grepl("_PMG", SAMPLE_ID)) %>% dplyr::select(FASTQ_FILE, SAMPLE_ID) %>% dplyr::select(FASTQ_FILE,SAMPLE_ID)
samples <-
samples %>%
separate(SAMPLE_ID, into = c("id", "condition", "replicate"), sep = "-", remove = FALSE, convert = TRUE) %>%
arrange(id) %>%
mutate(sample_name = c(paste("w1118", seq(1,2,1), sep = "_"), paste("RelE20", seq(1,2,1), sep = "_"), paste("Shn-RNAi", seq(1,3,1), sep="_"), paste("Shn-RNAi, RelE20", seq(1,2,1), sep="_")))
samples$directory <- paste0("~/lavoro/drosophilaRNAseq/Drosophila RNAseq/quants_008474/quants_008474/", substr(samples$FASTQ_FILE,start = 1, stop=18), "_quant")
rownames(samples) <- samples$FASTQ_FILE
files <- file.path(samples$directory, "quant.sf")
names(files) <- samples$sample_name
files
samples %>% dplyr::select(id, condition, replicate, SAMPLE_ID, sample_name, FASTQ_FILE, directory)
write.csv(samples, file = "~/lavoro/drosophilaRNAseq/Drosophila RNAseq/vignette/samples_second_dataset.csv")
library(tximeta)
coldata <- data.frame(files, names = samples$sample_name)
se <- tximeta(coldata)
gse <- summarizeToGene(se)
library(org.Dm.eg.db)
gse <- addIds(gse, "REFSEQ", gene=TRUE)
mcols(gse)
library(DESeq2)
colData(gse)$condition <- as_factor(samples$condition)
dds <- DESeqDataSet(gse, design = ~ condition)
dds$condition <- relevel(dds$condition, ref = "WT_PMG")
write_csv(rowData(dds) %>% as_tibble() %>% right_join(data.frame(counts(dds)) %>% rownames_to_column(var="gene_id"), by = "gene_id") %>% dplyr::select(gene_id, gene_name, starts_with("X")), "~/lavoro/drosophilaRNAseq/Drosophila RNAseq/count_table_8474.csv")
before <- nrow(dds)
#remove low counts
dds <- dds[rowSums(counts(dds)) >= 5, ]
after <- nrow(dds)
#rename genes
rownames(dds) <- mcols(dds)$symbol
library("vsn")
# 0. log transform log2(n + 1)
ntd <- normTransform(dds)
meanSdPlot(assay(ntd))
# 1. variance stabilizing transformation
vsd <- vst(dds, blind = FALSE)
meanSdPlot(assay(vsd))
# 2. rlog
rld <- rlog(dds, blind = FALSE)
meanSdPlot(assay(rld))
boxplot(assay(ntd), cex.axis = 0.6, main="log2(x + 1)")
boxplot(assay(vsd), cex.axis = 0.6, main="vst")
boxplot(assay(rld), cex.axis = 0.6, main="rlog")
library(pheatmap)
library("PoiClaClu")
library("RColorBrewer")
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
poisd <- PoissonDistance(t(counts(dds)))
samplePoisDistMatrix <- as.matrix( poisd$dd )
rownames(samplePoisDistMatrix) <- dds$names
colnames(samplePoisDistMatrix) <- NULL
pheatmap(samplePoisDistMatrix,
clustering_distance_rows = poisd$dd,
clustering_distance_cols = poisd$dd,
col = colors, main="Sample-sample poisson distance unnorm")
library(readxl)
library(pheatmap)
library(RColorBrewer)
Heatmap_S3C <- read_excel("~/lavoro/drosophilaRNAseq/Drosophila RNAseq/Thank_you_very_much/Heatmap gene list_updted.xlsx", sheet = "Figure S3C")
write.csv(Heatmap_S3C, file = "~/lavoro/drosophilaRNAseq/Drosophila RNAseq/vignette/apoptotic_genes.csv")
#genes not in rownames:
Heatmap_S3C$gene[!Heatmap_S3C$gene %in% rownames(vsd)]
#VSD normalization
pheatmap(assay(vsd)[Heatmap_S3C$gene,], scale = "row", color=colorRampPalette(rev(brewer.pal(n=11, name = "RdBu")))(200), cluster_cols = F)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE, cache=TRUE)
library("tximport")
library("readr")
library("tximportData")
library("tidyverse")
#Import meta files created by GPCF
X4927_meta <- read_delim("~/lavoro/drosophilaRNAseq/Drosophila RNAseq/4927_meta.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
samples <- X4927_meta %>% filter(grepl("1\\.|2\\.|3\\.|4\\.|5\\.|6\\.|7\\.", SAMPLE_ID)) %>% arrange(SAMPLE_ID) %>% dplyr::select(FASTQ_FILE,SAMPLE_ID)
samples <-
samples %>%
separate(SAMPLE_ID, into = c("id", "condition"), sep = "\\.", remove = FALSE, convert = TRUE) %>% mutate(condition = str_trim(condition, side=c("left"))) %>%
arrange(id) %>%
mutate(sample_name = c(paste("w1118", seq(1,3,1), sep = "_"), paste("Shn-RNAi", seq(1,2,1), sep="_"), paste("Shn-RNAi, PucE69/+", seq(1,2,1), sep="_")))
samples$directory <- paste0("~/lavoro/drosophilaRNAseq/Drosophila RNAseq/quants_004927/quants_004927/", substr(samples$FASTQ_FILE,start = 1, stop=17), "_quant")
rownames(samples) <- samples$FASTQ_FILE
files <- file.path(samples$directory, "quant.sf")
names(files) <- samples$sample_name
files
samples %>% dplyr::select(id, condition, SAMPLE_ID, sample_name, FASTQ_FILE, directory)
write.csv(samples, file="~/lavoro/drosophilaRNAseq/Drosophila RNAseq/vignette/samples.csv")
library(tximeta)
coldata <- data.frame(files, names = samples$sample_name)
se <- tximeta(coldata)
gse <- summarizeToGene(se)
library(org.Dm.eg.db)
gse <- addIds(gse, "REFSEQ", gene=TRUE)
mcols(gse)
library(DESeq2)
colData(gse)$condition <- as_factor(samples$condition)
dds <- DESeqDataSet(gse, design = ~ condition)
dds$condition <- relevel(dds$condition, ref = "WT day7")
write_csv(rowData(dds) %>% as_tibble() %>% right_join(data.frame(counts(dds)) %>% rownames_to_column(var="gene_id"), by = "gene_id") %>% dplyr::select(gene_id, gene_name, starts_with("X")), "~/lavoro/drosophilaRNAseq/Drosophila RNAseq/count_table_4927.csv")
before <- nrow(dds)
#remove low counts
dds <- dds[rowSums(counts(dds)) >= 5, ]
after <- nrow(dds)
#rename genes
rownames(dds) <- mcols(dds)$symbol
counts(dds)
sum(counts(dds))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE, cache=TRUE)
library("tximport")
library("readr")
library("tximportData")
library("tidyverse")
#Import meta files created by GPCF
X4927_meta <- read_delim("~/lavoro/drosophilaRNAseq/Drosophila RNAseq/4927_meta.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
samples <- X4927_meta %>% filter(grepl("1\\.|2\\.|3\\.|4\\.|5\\.|6\\.|7\\.", SAMPLE_ID)) %>% arrange(SAMPLE_ID) %>% dplyr::select(FASTQ_FILE,SAMPLE_ID)
samples <-
samples %>%
separate(SAMPLE_ID, into = c("id", "condition"), sep = "\\.", remove = FALSE, convert = TRUE) %>% mutate(condition = str_trim(condition, side=c("left"))) %>%
arrange(id) %>%
mutate(sample_name = c(paste("w1118", seq(1,3,1), sep = "_"), paste("Shn-RNAi", seq(1,2,1), sep="_"), paste("Shn-RNAi, PucE69/+", seq(1,2,1), sep="_")))
samples$directory <- paste0("~/lavoro/drosophilaRNAseq/Drosophila RNAseq/quants_004927/quants_004927/", substr(samples$FASTQ_FILE,start = 1, stop=17), "_quant")
rownames(samples) <- samples$FASTQ_FILE
files <- file.path(samples$directory, "quant.sf")
names(files) <- samples$sample_name
files
samples %>% dplyr::select(id, condition, SAMPLE_ID, sample_name, FASTQ_FILE, directory)
write.csv(samples, file="~/lavoro/drosophilaRNAseq/Drosophila RNAseq/vignette/samples.csv")
library(tximeta)
coldata <- data.frame(files, names = samples$sample_name)
se <- tximeta(coldata)
gse <- summarizeToGene(se)
library(org.Dm.eg.db)
gse <- addIds(gse, "REFSEQ", gene=TRUE)
mcols(gse)
library(DESeq2)
colData(gse)$condition <- as_factor(samples$condition)
dds <- DESeqDataSet(gse, design = ~ condition)
dds$condition <- relevel(dds$condition, ref = "WT day7")
write_csv(rowData(dds) %>% as_tibble() %>% right_join(data.frame(counts(dds)) %>% rownames_to_column(var="gene_id"), by = "gene_id") %>% dplyr::select(gene_id, gene_name, starts_with("X")), "~/lavoro/drosophilaRNAseq/Drosophila RNAseq/count_table_4927.csv")
counts(dds)
sum(counts(dds))
rowSums(counts(dds))
sum(rowSums(counts(dds)))
sum(counts(dds))
ncol(count(dds))
ncols(count(dds))
ncols(counts(dds))
ncol(counts(dds))
7*19
rowData(dds) %>% as_tibble() %>% right_join(data.frame(counts(dds)) %>% rownames_to_column(var="gene_id"), by = "gene_id")
counts(dds)
rowData(dds) %>% as_tibble() %>% right_join(data.frame(counts(dds)) %>% rownames_to_column(var="gene_id"), by = "gene_id") %>% dplyr:select(starts_with("gene"))
rowData(dds) %>% as_tibble() %>% right_join(data.frame(counts(dds)) %>% rownames_to_column(var="gene_id"), by = "gene_id") %>% dplyr::select(starts_with("gene"))
rowData(dds) %>% as_tibble() %>% right_join(data.frame(counts(dds)) %>% rownames_to_column(var="gene_id"), by = "gene_id")
rownames(dds) <- mcols(dds)$symbol
counts(dds)
write_csv(data.frame(counts(dds)), "~/lavoro/drosophilaRNAseq/Drosophila RNAseq/count_table_4927.csv")
